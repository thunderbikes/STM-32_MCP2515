
canbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002970  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b08  08002b08  00003b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b20  08002b20  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b20  08002b20  00003b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b28  08002b28  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b28  08002b28  00003b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b2c  08002b2c  00003b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b30  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000010  08002b3c  00004010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002b3c  000040a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000715f  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001610  00000000  00000000  0000b19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000514  00000000  00000000  0000ce80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001546f  00000000  00000000  0000d394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f22  00000000  00000000  00022803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084ff7  00000000  00000000  0002a725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af71c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a38  00000000  00000000  000af760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000b1198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002af0 	.word	0x08002af0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08002af0 	.word	0x08002af0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fdf4 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f818 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8b4 	bl	8000640 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d8:	f000 f87c 	bl	80005d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //MCP2515 mcp;
  //MCP2515_init(mcp, _CS, _SPI_CLOCK);
  if(MCP2515_reset(&hspi1) != ERROR_OK)
 80004dc:	4807      	ldr	r0, [pc, #28]	@ (80004fc <main+0x34>)
 80004de:	f000 f8f7 	bl	80006d0 <MCP2515_reset>
  {
	  //shutdown bike
  }
  if (set_bitrate_125kbps(&hspi1) != ERROR_OK)
 80004e2:	4806      	ldr	r0, [pc, #24]	@ (80004fc <main+0x34>)
 80004e4:	f000 f9a8 	bl	8000838 <set_bitrate_125kbps>
  {
	  //shutdown bike
  }
  if (setMode(CANCTRL_REQOP_NORMAL, &hspi1) != ERROR_OK)
 80004e8:	4904      	ldr	r1, [pc, #16]	@ (80004fc <main+0x34>)
 80004ea:	2000      	movs	r0, #0
 80004ec:	f000 f9d6 	bl	800089c <setMode>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (readMessage(&can_msg, &hspi1) == ERROR_OK)
 80004f0:	4902      	ldr	r1, [pc, #8]	@ (80004fc <main+0x34>)
 80004f2:	4803      	ldr	r0, [pc, #12]	@ (8000500 <main+0x38>)
 80004f4:	f000 fa8a 	bl	8000a0c <readMessage>
 80004f8:	e7fa      	b.n	80004f0 <main+0x28>
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000088 	.word	0x20000088

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	@ 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	@ 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f002 fac0 	bl	8002a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4b27      	ldr	r3, [pc, #156]	@ (80005cc <SystemClock_Config+0xc8>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000530:	4a26      	ldr	r2, [pc, #152]	@ (80005cc <SystemClock_Config+0xc8>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	@ 0x40
 8000538:	4b24      	ldr	r3, [pc, #144]	@ (80005cc <SystemClock_Config+0xc8>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b21      	ldr	r3, [pc, #132]	@ (80005d0 <SystemClock_Config+0xcc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a20      	ldr	r2, [pc, #128]	@ (80005d0 <SystemClock_Config+0xcc>)
 800054e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <SystemClock_Config+0xcc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	2310      	movs	r3, #16
 800056a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000570:	2300      	movs	r3, #0
 8000572:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000574:	2308      	movs	r3, #8
 8000576:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000578:	2350      	movs	r3, #80	@ 0x50
 800057a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000580:	2304      	movs	r3, #4
 8000582:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	4618      	mov	r0, r3
 800058a:	f001 f88b 	bl	80016a4 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000594:	f000 f896 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2302      	movs	r3, #2
 800059e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80005a0:	23a0      	movs	r3, #160	@ 0xa0
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 faee 	bl	8001b94 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005be:	f000 f881 	bl	80006c4 <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3750      	adds	r7, #80	@ 0x50
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005d8:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <MX_SPI1_Init+0x64>)
 80005da:	4a18      	ldr	r2, [pc, #96]	@ (800063c <MX_SPI1_Init+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005de:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <MX_SPI1_Init+0x64>)
 80005e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80005e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_SPI1_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_SPI1_Init+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_SPI1_Init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_SPI1_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <MX_SPI1_Init+0x64>)
 8000600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000604:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000606:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <MX_SPI1_Init+0x64>)
 8000608:	2200      	movs	r2, #0
 800060a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800060c:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <MX_SPI1_Init+0x64>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <MX_SPI1_Init+0x64>)
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000618:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <MX_SPI1_Init+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800061e:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <MX_SPI1_Init+0x64>)
 8000620:	220a      	movs	r2, #10
 8000622:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	@ (8000638 <MX_SPI1_Init+0x64>)
 8000626:	f001 fc61 	bl	8001eec <HAL_SPI_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000630:	f000 f848 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000002c 	.word	0x2000002c
 800063c:	40013000 	.word	0x40013000

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <MX_GPIO_Init+0x7c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a17      	ldr	r2, [pc, #92]	@ (80006bc <MX_GPIO_Init+0x7c>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <MX_GPIO_Init+0x7c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_GPIO_Init+0x7c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a10      	ldr	r2, [pc, #64]	@ (80006bc <MX_GPIO_Init+0x7c>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_GPIO_Init+0x7c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2180      	movs	r1, #128	@ 0x80
 8000692:	480b      	ldr	r0, [pc, #44]	@ (80006c0 <MX_GPIO_Init+0x80>)
 8000694:	f000 ffec 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000698:	2380      	movs	r3, #128	@ 0x80
 800069a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4619      	mov	r1, r3
 80006ae:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_GPIO_Init+0x80>)
 80006b0:	f000 fe5a 	bl	8001368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020000 	.word	0x40020000

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <Error_Handler+0x8>

080006d0 <MCP2515_reset>:
    // pinMode(mcp->SPICS, OUTPUT);
    // digitalWrite(mcp->SPICS, HIGH);
}

CAN_ERROR MCP2515_reset(SPI_HandleTypeDef* hspi1)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	@ 0x30
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
    startSPI();
 80006d8:	f000 faea 	bl	8000cb0 <startSPI>
    uint8_t instruction = INSTRUCTION_RESET;
 80006dc:	23c0      	movs	r3, #192	@ 0xc0
 80006de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    HAL_SPI_Transmit(hspi1, &instruction, 1, HAL_MAX_DELAY);
 80006e2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	2201      	movs	r2, #1
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f001 fc86 	bl	8001ffe <HAL_SPI_Transmit>
    endSPI();
 80006f2:	f000 fae9 	bl	8000cc8 <endSPI>

    delay(10);
 80006f6:	200a      	movs	r0, #10
 80006f8:	f000 fc9e 	bl	8001038 <delay>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	220e      	movs	r2, #14
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f002 f9c7 	bl	8002a98 <memset>
    setRegisters(MCP_TXB0CTRL, zeros, 14, hspi1);
 800070a:	f107 0114 	add.w	r1, r7, #20
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	220e      	movs	r2, #14
 8000712:	2030      	movs	r0, #48	@ 0x30
 8000714:	f000 fb6a 	bl	8000dec <setRegisters>
    setRegisters(MCP_TXB1CTRL, zeros, 14, hspi1);
 8000718:	f107 0114 	add.w	r1, r7, #20
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	220e      	movs	r2, #14
 8000720:	2040      	movs	r0, #64	@ 0x40
 8000722:	f000 fb63 	bl	8000dec <setRegisters>
    setRegisters(MCP_TXB2CTRL, zeros, 14, hspi1);
 8000726:	f107 0114 	add.w	r1, r7, #20
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	220e      	movs	r2, #14
 800072e:	2050      	movs	r0, #80	@ 0x50
 8000730:	f000 fb5c 	bl	8000dec <setRegisters>

    setRegister(MCP_RXB0CTRL, 0, hspi1);
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	2100      	movs	r1, #0
 8000738:	2060      	movs	r0, #96	@ 0x60
 800073a:	f000 fb2f 	bl	8000d9c <setRegister>
    setRegister(MCP_RXB1CTRL, 0, hspi1);
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	2100      	movs	r1, #0
 8000742:	2070      	movs	r0, #112	@ 0x70
 8000744:	f000 fb2a 	bl	8000d9c <setRegister>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF, hspi1);
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	21a3      	movs	r1, #163	@ 0xa3
 800074c:	202b      	movs	r0, #43	@ 0x2b
 800074e:	f000 fb25 	bl	8000d9c <setRegister>

    modifyRegister(MCP_RXB0CTRL,
 8000752:	2260      	movs	r2, #96	@ 0x60
 8000754:	2304      	movs	r3, #4
 8000756:	4313      	orrs	r3, r2
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2203      	movs	r2, #3
 800075c:	4313      	orrs	r3, r2
 800075e:	b2d9      	uxtb	r1, r3
 8000760:	2200      	movs	r2, #0
 8000762:	2304      	movs	r3, #4
 8000764:	4313      	orrs	r3, r2
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2200      	movs	r2, #0
 800076a:	4313      	orrs	r3, r2
 800076c:	b2da      	uxtb	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2060      	movs	r0, #96	@ 0x60
 8000772:	f000 fb71 	bl	8000e58 <modifyRegister>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT, hspi1);
    modifyRegister(MCP_RXB1CTRL,
 8000776:	2260      	movs	r2, #96	@ 0x60
 8000778:	2307      	movs	r3, #7
 800077a:	4313      	orrs	r3, r2
 800077c:	b2d9      	uxtb	r1, r3
 800077e:	2200      	movs	r2, #0
 8000780:	2301      	movs	r3, #1
 8000782:	4313      	orrs	r3, r2
 8000784:	b2da      	uxtb	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2070      	movs	r0, #112	@ 0x70
 800078a:	f000 fb65 	bl	8000e58 <modifyRegister>
                   RXBnCTRL_RXM_MASK | RXB1CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT, hspi1);

    RXF filters[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05};
 800078e:	4a29      	ldr	r2, [pc, #164]	@ (8000834 <MCP2515_reset+0x164>)
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000798:	6018      	str	r0, [r3, #0]
 800079a:	3304      	adds	r3, #4
 800079c:	8019      	strh	r1, [r3, #0]
    for (int i = 0; i < 6; i++) {
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007a2:	e01e      	b.n	80007e2 <MCP2515_reset+0x112>
        bool ext = (i == 1);
 80007a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	bf0c      	ite	eq
 80007aa:	2301      	moveq	r3, #1
 80007ac:	2300      	movne	r3, #0
 80007ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        CAN_ERROR result = setFilter(filters[i], ext, 0, hspi1);
 80007b2:	f107 020c 	add.w	r2, r7, #12
 80007b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007b8:	4413      	add	r3, r2
 80007ba:	7818      	ldrb	r0, [r3, #0]
 80007bc:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	f000 f97a 	bl	8000abc <setFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 80007ce:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d002      	beq.n	80007dc <MCP2515_reset+0x10c>
            return result;
 80007d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80007da:	e027      	b.n	800082c <MCP2515_reset+0x15c>
    for (int i = 0; i < 6; i++) {
 80007dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007de:	3301      	adds	r3, #1
 80007e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007e4:	2b05      	cmp	r3, #5
 80007e6:	dddd      	ble.n	80007a4 <MCP2515_reset+0xd4>
        }
    }

    MASK masks[] = {0x00, 0x01};
 80007e8:	2300      	movs	r3, #0
 80007ea:	723b      	strb	r3, [r7, #8]
 80007ec:	2301      	movs	r3, #1
 80007ee:	727b      	strb	r3, [r7, #9]
    for (int i = 0; i < 2; i++) {
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007f4:	e016      	b.n	8000824 <MCP2515_reset+0x154>
        CAN_ERROR result = setFilterMask(masks[i], true, 0, hspi1);
 80007f6:	f107 0208 	add.w	r2, r7, #8
 80007fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007fc:	4413      	add	r3, r2
 80007fe:	7818      	ldrb	r0, [r3, #0]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	2101      	movs	r1, #1
 8000806:	f000 f9a7 	bl	8000b58 <setFilterMask>
 800080a:	4603      	mov	r3, r0
 800080c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 8000810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <MCP2515_reset+0x14e>
            return result;
 8000818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800081c:	e006      	b.n	800082c <MCP2515_reset+0x15c>
    for (int i = 0; i < 2; i++) {
 800081e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000820:	3301      	adds	r3, #1
 8000822:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000826:	2b01      	cmp	r3, #1
 8000828:	dde5      	ble.n	80007f6 <MCP2515_reset+0x126>
        }
    }

    return ERROR_OK;
 800082a:	2300      	movs	r3, #0
}
 800082c:	4618      	mov	r0, r3
 800082e:	3730      	adds	r7, #48	@ 0x30
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08002b08 	.word	0x08002b08

08000838 <set_bitrate_125kbps>:


CAN_ERROR set_bitrate_125kbps(SPI_HandleTypeDef* hspi1)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

    CAN_ERROR error = setConfigMode(hspi1);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 f90e 	bl	8000a62 <setConfigMode>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]
    if (error != ERROR_OK) {
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <set_bitrate_125kbps+0x1c>
        return error;
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	e01f      	b.n	8000894 <set_bitrate_125kbps+0x5c>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 8000854:	2301      	movs	r3, #1
 8000856:	73bb      	strb	r3, [r7, #14]

    cfg1 = MCP_16MHz_125kBPS_CFG1;
 8000858:	2303      	movs	r3, #3
 800085a:	737b      	strb	r3, [r7, #13]
    cfg2 = MCP_16MHz_125kBPS_CFG2;
 800085c:	23f0      	movs	r3, #240	@ 0xf0
 800085e:	733b      	strb	r3, [r7, #12]
    cfg3 = MCP_16MHz_125kBPS_CFG3;
 8000860:	2386      	movs	r3, #134	@ 0x86
 8000862:	72fb      	strb	r3, [r7, #11]

    if (set) {
 8000864:	7bbb      	ldrb	r3, [r7, #14]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d013      	beq.n	8000892 <set_bitrate_125kbps+0x5a>
            setRegister(MCP_CNF1, cfg1, hspi1);
 800086a:	7b7b      	ldrb	r3, [r7, #13]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	4619      	mov	r1, r3
 8000870:	202a      	movs	r0, #42	@ 0x2a
 8000872:	f000 fa93 	bl	8000d9c <setRegister>
            setRegister(MCP_CNF2, cfg2, hspi1);
 8000876:	7b3b      	ldrb	r3, [r7, #12]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4619      	mov	r1, r3
 800087c:	2029      	movs	r0, #41	@ 0x29
 800087e:	f000 fa8d 	bl	8000d9c <setRegister>
            setRegister(MCP_CNF3, cfg3, hspi1);
 8000882:	7afb      	ldrb	r3, [r7, #11]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	4619      	mov	r1, r3
 8000888:	2028      	movs	r0, #40	@ 0x28
 800088a:	f000 fa87 	bl	8000d9c <setRegister>
            return ERROR_OK;
 800088e:	2300      	movs	r3, #0
 8000890:	e000      	b.n	8000894 <set_bitrate_125kbps+0x5c>
        }
    else {
        return ERROR_FAIL;
 8000892:	2301      	movs	r3, #1
    }
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <setMode>:

CAN_ERROR setMode(const CANCTRL_REQOP_MODE mode, SPI_HandleTypeDef* hspi1)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode, hspi1);
 80008a8:	21e0      	movs	r1, #224	@ 0xe0
 80008aa:	79fa      	ldrb	r2, [r7, #7]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	200f      	movs	r0, #15
 80008b0:	f000 fad2 	bl	8000e58 <modifyRegister>

    unsigned long endTime = millis() + 10;
 80008b4:	f000 fbb4 	bl	8001020 <millis>
 80008b8:	4603      	mov	r3, r0
 80008ba:	330a      	adds	r3, #10
 80008bc:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 80008be:	2300      	movs	r3, #0
 80008c0:	75fb      	strb	r3, [r7, #23]
    while (millis() < endTime) {
 80008c2:	e013      	b.n	80008ec <setMode+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT, hspi1);
 80008c4:	6839      	ldr	r1, [r7, #0]
 80008c6:	200e      	movs	r0, #14
 80008c8:	f000 fa0a 	bl	8000ce0 <readRegister>
 80008cc:	4603      	mov	r3, r0
 80008ce:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 80008d0:	22e0      	movs	r2, #224	@ 0xe0
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	4013      	ands	r3, r2
 80008d6:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 80008d8:	7bfa      	ldrb	r2, [r7, #15]
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	429a      	cmp	r2, r3
 80008de:	bf0c      	ite	eq
 80008e0:	2301      	moveq	r3, #1
 80008e2:	2300      	movne	r3, #0
 80008e4:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 80008e6:	7dfb      	ldrb	r3, [r7, #23]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d106      	bne.n	80008fa <setMode+0x5e>
    while (millis() < endTime) {
 80008ec:	f000 fb98 	bl	8001020 <millis>
 80008f0:	4602      	mov	r2, r0
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d8e5      	bhi.n	80008c4 <setMode+0x28>
 80008f8:	e000      	b.n	80008fc <setMode+0x60>
            break;
 80008fa:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 80008fc:	7dfb      	ldrb	r3, [r7, #23]
 80008fe:	f083 0301 	eor.w	r3, r3, #1
 8000902:	b2db      	uxtb	r3, r3

}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <readMessageInternal>:

CAN_ERROR readMessageInternal(const RXBn rxbn, struct can_frame *frame, SPI_HandleTypeDef* hspi1)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
 8000918:	73fb      	strb	r3, [r7, #15]

	uint8_t tbufdata[5];

	readRegisters(RXB->SIDH, tbufdata, 5, hspi1);
 800091a:	2061      	movs	r0, #97	@ 0x61
 800091c:	f107 0114 	add.w	r1, r7, #20
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2205      	movs	r2, #5
 8000924:	f000 fa04 	bl	8000d30 <readRegisters>

	uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 8000928:	2300      	movs	r3, #0
 800092a:	3320      	adds	r3, #32
 800092c:	443b      	add	r3, r7
 800092e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	2201      	movs	r2, #1
 8000936:	3220      	adds	r2, #32
 8000938:	443a      	add	r2, r7
 800093a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800093e:	0952      	lsrs	r2, r2, #5
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	4413      	add	r3, r2
 8000944:	61fb      	str	r3, [r7, #28]

	if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 8000946:	2301      	movs	r3, #1
 8000948:	3320      	adds	r3, #32
 800094a:	443b      	add	r3, r7
 800094c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000950:	2208      	movs	r2, #8
 8000952:	4013      	ands	r3, r2
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2208      	movs	r2, #8
 8000958:	4293      	cmp	r3, r2
 800095a:	d120      	bne.n	800099e <readMessageInternal+0x92>
	    id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	009a      	lsls	r2, r3, #2
 8000960:	2301      	movs	r3, #1
 8000962:	3320      	adds	r3, #32
 8000964:	443b      	add	r3, r7
 8000966:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800096a:	f003 0303 	and.w	r3, r3, #3
 800096e:	4413      	add	r3, r2
 8000970:	61fb      	str	r3, [r7, #28]
	    id = (id<<8) + tbufdata[MCP_EID8];
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	021b      	lsls	r3, r3, #8
 8000976:	2202      	movs	r2, #2
 8000978:	3220      	adds	r2, #32
 800097a:	443a      	add	r2, r7
 800097c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8000980:	4413      	add	r3, r2
 8000982:	61fb      	str	r3, [r7, #28]
	    id = (id<<8) + tbufdata[MCP_EID0];
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	2203      	movs	r2, #3
 800098a:	3220      	adds	r2, #32
 800098c:	443a      	add	r2, r7
 800098e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8000992:	4413      	add	r3, r2
 8000994:	61fb      	str	r3, [r7, #28]
	    id |= CAN_EFF_FLAG;
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800099c:	61fb      	str	r3, [r7, #28]
	}

	uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 800099e:	2304      	movs	r3, #4
 80009a0:	3320      	adds	r3, #32
 80009a2:	443b      	add	r3, r7
 80009a4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80009a8:	220f      	movs	r2, #15
 80009aa:	4013      	ands	r3, r2
 80009ac:	76fb      	strb	r3, [r7, #27]
	if (dlc > CAN_MAX_DLEN) {
 80009ae:	7efb      	ldrb	r3, [r7, #27]
 80009b0:	2b08      	cmp	r3, #8
 80009b2:	d901      	bls.n	80009b8 <readMessageInternal+0xac>
	    return ERROR_FAIL;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e025      	b.n	8000a04 <readMessageInternal+0xf8>
	}

	uint8_t ctrl = readRegister(RXB->CTRL, hspi1);
 80009b8:	2360      	movs	r3, #96	@ 0x60
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f98f 	bl	8000ce0 <readRegister>
 80009c2:	4603      	mov	r3, r0
 80009c4:	76bb      	strb	r3, [r7, #26]
	if (ctrl & RXBnCTRL_RTR) {
 80009c6:	2208      	movs	r2, #8
 80009c8:	7ebb      	ldrb	r3, [r7, #26]
 80009ca:	4013      	ands	r3, r2
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d003      	beq.n	80009da <readMessageInternal+0xce>
	    id |= CAN_RTR_FLAG;
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80009d8:	61fb      	str	r3, [r7, #28]
	}

	frame->can_id = id;
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	69fa      	ldr	r2, [r7, #28]
 80009de:	601a      	str	r2, [r3, #0]
	frame->can_dlc = dlc;
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	7efa      	ldrb	r2, [r7, #27]
 80009e4:	711a      	strb	r2, [r3, #4]

	readRegisters(RXB->DATA, frame->data, dlc, hspi1);
 80009e6:	2066      	movs	r0, #102	@ 0x66
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	f103 0108 	add.w	r1, r3, #8
 80009ee:	7efa      	ldrb	r2, [r7, #27]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f000 f99d 	bl	8000d30 <readRegisters>

	modifyRegister(MCP_CANINTF, RXB->CANINTF_RXnIF, 0, hspi1);
 80009f6:	2101      	movs	r1, #1
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	202c      	movs	r0, #44	@ 0x2c
 80009fe:	f000 fa2b 	bl	8000e58 <modifyRegister>

    return ERROR_OK;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <readMessage>:

CAN_ERROR readMessage(struct can_frame *frame, SPI_HandleTypeDef* hspi1)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
    CAN_ERROR rc;
    uint8_t stat = getStatus(hspi1);
 8000a16:	6838      	ldr	r0, [r7, #0]
 8000a18:	f000 f830 	bl	8000a7c <getStatus>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d007      	beq.n	8000a3a <readMessage+0x2e>
        rc = readMessageInternal(RXB0, frame, hspi1);
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	6879      	ldr	r1, [r7, #4]
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff ff6c 	bl	800090c <readMessageInternal>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	e00e      	b.n	8000a58 <readMessage+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 8000a3a:	7bbb      	ldrb	r3, [r7, #14]
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d007      	beq.n	8000a54 <readMessage+0x48>
        rc = readMessageInternal(RXB1, frame, hspi1);
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff ff5f 	bl	800090c <readMessageInternal>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	73fb      	strb	r3, [r7, #15]
 8000a52:	e001      	b.n	8000a58 <readMessage+0x4c>
    } else {
        rc = ERROR_NOMSG;
 8000a54:	2305      	movs	r3, #5
 8000a56:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <setConfigMode>:


CAN_ERROR setConfigMode(SPI_HandleTypeDef* hspi1)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG, hspi1);
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	2080      	movs	r0, #128	@ 0x80
 8000a6e:	f7ff ff15 	bl	800089c <setMode>
 8000a72:	4603      	mov	r3, r0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <getStatus>:
{
    return setMode(CANCTRL_REQOP_NORMAL, hspi1);
}

uint8_t getStatus(SPI_HandleTypeDef* hspi1)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

	uint8_t data;
	uint8_t instruction = INSTRUCTION_READ_STATUS;
 8000a84:	23a0      	movs	r3, #160	@ 0xa0
 8000a86:	73bb      	strb	r3, [r7, #14]

    startSPI();
 8000a88:	f000 f912 	bl	8000cb0 <startSPI>

    HAL_SPI_Transmit(hspi1, &instruction, 1, HAL_MAX_DELAY);
 8000a8c:	f107 010e 	add.w	r1, r7, #14
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	2201      	movs	r2, #1
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f001 fab1 	bl	8001ffe <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8000a9c:	f107 010f 	add.w	r1, r7, #15
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f001 fbec 	bl	8002284 <HAL_SPI_Receive>
    endSPI();
 8000aac:	f000 f90c 	bl	8000cc8 <endSPI>

    return data;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <setFilter>:

CAN_ERROR setFilter(const RXF num, const bool ext, const uint32_t ulData, SPI_HandleTypeDef* hspi1)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60ba      	str	r2, [r7, #8]
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	460b      	mov	r3, r1
 8000acc:	73bb      	strb	r3, [r7, #14]
    CAN_ERROR res = setConfigMode(hspi1);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ffc7 	bl	8000a62 <setConfigMode>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8000ad8:	7dbb      	ldrb	r3, [r7, #22]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <setFilter+0x26>
        return res;
 8000ade:	7dbb      	ldrb	r3, [r7, #22]
 8000ae0:	e035      	b.n	8000b4e <setFilter+0x92>
    }

    REGISTER reg;

    switch (num) {
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	2b05      	cmp	r3, #5
 8000ae6:	d821      	bhi.n	8000b2c <setFilter+0x70>
 8000ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8000af0 <setFilter+0x34>)
 8000aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aee:	bf00      	nop
 8000af0:	08000b09 	.word	0x08000b09
 8000af4:	08000b0f 	.word	0x08000b0f
 8000af8:	08000b15 	.word	0x08000b15
 8000afc:	08000b1b 	.word	0x08000b1b
 8000b00:	08000b21 	.word	0x08000b21
 8000b04:	08000b27 	.word	0x08000b27
        case RXF0: reg = MCP_RXF0SIDH; break;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	75fb      	strb	r3, [r7, #23]
 8000b0c:	e010      	b.n	8000b30 <setFilter+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	75fb      	strb	r3, [r7, #23]
 8000b12:	e00d      	b.n	8000b30 <setFilter+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 8000b14:	2308      	movs	r3, #8
 8000b16:	75fb      	strb	r3, [r7, #23]
 8000b18:	e00a      	b.n	8000b30 <setFilter+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	75fb      	strb	r3, [r7, #23]
 8000b1e:	e007      	b.n	8000b30 <setFilter+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 8000b20:	2314      	movs	r3, #20
 8000b22:	75fb      	strb	r3, [r7, #23]
 8000b24:	e004      	b.n	8000b30 <setFilter+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 8000b26:	2318      	movs	r3, #24
 8000b28:	75fb      	strb	r3, [r7, #23]
 8000b2a:	e001      	b.n	8000b30 <setFilter+0x74>
        default:
            return ERROR_FAIL;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e00e      	b.n	8000b4e <setFilter+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8000b30:	7bb9      	ldrb	r1, [r7, #14]
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 f841 	bl	8000bc0 <prepareId>
    setRegisters(reg, tbufdata, 4, hspi1);
 8000b3e:	f107 0110 	add.w	r1, r7, #16
 8000b42:	7df8      	ldrb	r0, [r7, #23]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2204      	movs	r2, #4
 8000b48:	f000 f950 	bl	8000dec <setRegisters>

    return ERROR_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop

08000b58 <setFilterMask>:

CAN_ERROR setFilterMask(const MASK mask, const bool ext, const uint32_t ulData, SPI_HandleTypeDef* hspi1)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60ba      	str	r2, [r7, #8]
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4603      	mov	r3, r0
 8000b64:	73fb      	strb	r3, [r7, #15]
 8000b66:	460b      	mov	r3, r1
 8000b68:	73bb      	strb	r3, [r7, #14]
    CAN_ERROR res = setConfigMode(hspi1);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff79 	bl	8000a62 <setConfigMode>
 8000b70:	4603      	mov	r3, r0
 8000b72:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8000b74:	7dbb      	ldrb	r3, [r7, #22]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <setFilterMask+0x26>
        return res;
 8000b7a:	7dbb      	ldrb	r3, [r7, #22]
 8000b7c:	e01c      	b.n	8000bb8 <setFilterMask+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8000b7e:	7bb9      	ldrb	r1, [r7, #14]
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f81a 	bl	8000bc0 <prepareId>

    REGISTER reg;
    switch (mask) {
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <setFilterMask+0x40>
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d003      	beq.n	8000b9e <setFilterMask+0x46>
 8000b96:	e005      	b.n	8000ba4 <setFilterMask+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 8000b98:	2320      	movs	r3, #32
 8000b9a:	75fb      	strb	r3, [r7, #23]
 8000b9c:	e004      	b.n	8000ba8 <setFilterMask+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 8000b9e:	2324      	movs	r3, #36	@ 0x24
 8000ba0:	75fb      	strb	r3, [r7, #23]
 8000ba2:	e001      	b.n	8000ba8 <setFilterMask+0x50>
        default:
            return ERROR_FAIL;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e007      	b.n	8000bb8 <setFilterMask+0x60>
    }

    setRegisters(reg, tbufdata, 4, hspi1);
 8000ba8:	f107 0110 	add.w	r1, r7, #16
 8000bac:	7df8      	ldrb	r0, [r7, #23]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	f000 f91b 	bl	8000dec <setRegisters>

    return ERROR_OK;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <prepareId>:

void prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	72fb      	strb	r3, [r7, #11]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 8000bd2:	7afb      	ldrb	r3, [r7, #11]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d046      	beq.n	8000c66 <prepareId+0xa6>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 8000bd8:	2303      	movs	r3, #3
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	8afa      	ldrh	r2, [r7, #22]
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 8000be6:	8afb      	ldrh	r3, [r7, #22]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	2302      	movs	r3, #2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	440b      	add	r3, r1
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	0c1b      	lsrs	r3, r3, #16
 8000bfc:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8000bfe:	8afb      	ldrh	r3, [r7, #22]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	2301      	movs	r3, #1
 8000c04:	4619      	mov	r1, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	440b      	add	r3, r1
 8000c0a:	f002 0203 	and.w	r2, r2, #3
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 8000c12:	2301      	movs	r3, #1
 8000c14:	461a      	mov	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	7819      	ldrb	r1, [r3, #0]
 8000c1c:	8afb      	ldrh	r3, [r7, #22]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	f023 031f 	bic.w	r3, r3, #31
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4403      	add	r3, r0
 8000c32:	440a      	add	r2, r1
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	2108      	movs	r1, #8
 8000c44:	2301      	movs	r3, #1
 8000c46:	4618      	mov	r0, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4403      	add	r3, r0
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 8000c52:	8afb      	ldrh	r3, [r7, #22]
 8000c54:	095b      	lsrs	r3, r3, #5
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	440b      	add	r3, r1
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 8000c64:	e01d      	b.n	8000ca2 <prepareId+0xe2>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 8000c66:	8afb      	ldrh	r3, [r7, #22]
 8000c68:	08db      	lsrs	r3, r3, #3
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4619      	mov	r1, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	440b      	add	r3, r1
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 8000c78:	8afb      	ldrh	r3, [r7, #22]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	4619      	mov	r1, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	440b      	add	r3, r1
 8000c84:	0152      	lsls	r2, r2, #5
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4413      	add	r3, r2
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 8000c96:	2302      	movs	r3, #2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
}
 8000ca2:	bf00      	nop
 8000ca4:	371c      	adds	r7, #28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <startSPI>:
void startSPI(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); //start SPI communication
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2180      	movs	r1, #128	@ 0x80
 8000cb8:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <startSPI+0x14>)
 8000cba:	f000 fcd9 	bl	8001670 <HAL_GPIO_WritePin>
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <endSPI>:

void endSPI(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); //end SPI communication
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2180      	movs	r1, #128	@ 0x80
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <endSPI+0x14>)
 8000cd2:	f000 fccd 	bl	8001670 <HAL_GPIO_WritePin>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <readRegister>:
uint8_t readRegister(const REGISTER reg, SPI_HandleTypeDef* hspi1)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	startSPI();
 8000cec:	f7ff ffe0 	bl	8000cb0 <startSPI>
	uint8_t instruction = INSTRUCTION_READ;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(hspi1, &instruction, 1, HAL_MAX_DELAY); //send instruction
 8000cf4:	f107 010e 	add.w	r1, r7, #14
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	6838      	ldr	r0, [r7, #0]
 8000d00:	f001 f97d 	bl	8001ffe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi1, (uint8_t*)&reg, 1, HAL_MAX_DELAY); //send register
 8000d04:	1df9      	adds	r1, r7, #7
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	6838      	ldr	r0, [r7, #0]
 8000d0e:	f001 f976 	bl	8001ffe <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi1, &ret, 1, HAL_MAX_DELAY); //receive data
 8000d12:	f107 010f 	add.w	r1, r7, #15
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	6838      	ldr	r0, [r7, #0]
 8000d1e:	f001 fab1 	bl	8002284 <HAL_SPI_Receive>
	endSPI();
 8000d22:	f7ff ffd1 	bl	8000cc8 <endSPI>
	return ret;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <readRegisters>:
void readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n, SPI_HandleTypeDef* hspi1)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	73bb      	strb	r3, [r7, #14]
	startSPI();
 8000d42:	f7ff ffb5 	bl	8000cb0 <startSPI>
	uint8_t instruction = INSTRUCTION_READ;
 8000d46:	2303      	movs	r3, #3
 8000d48:	75bb      	strb	r3, [r7, #22]
	HAL_SPI_Transmit(hspi1, &instruction, 1, HAL_MAX_DELAY); //send instruction
 8000d4a:	f107 0116 	add.w	r1, r7, #22
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	2201      	movs	r2, #1
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f001 f952 	bl	8001ffe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi1, (uint8_t*)&reg, 1, HAL_MAX_DELAY); //send register
 8000d5a:	f107 010f 	add.w	r1, r7, #15
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	2201      	movs	r2, #1
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f001 f94a 	bl	8001ffe <HAL_SPI_Transmit>
	for (uint8_t i=0; i<n; i++){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	75fb      	strb	r3, [r7, #23]
 8000d6e:	e00b      	b.n	8000d88 <readRegisters+0x58>
		HAL_SPI_Receive(hspi1, &values[i], 1, HAL_MAX_DELAY); //receive data
 8000d70:	7dfb      	ldrb	r3, [r7, #23]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	18d1      	adds	r1, r2, r3
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f001 fa81 	bl	8002284 <HAL_SPI_Receive>
	for (uint8_t i=0; i<n; i++){
 8000d82:	7dfb      	ldrb	r3, [r7, #23]
 8000d84:	3301      	adds	r3, #1
 8000d86:	75fb      	strb	r3, [r7, #23]
 8000d88:	7dfa      	ldrb	r2, [r7, #23]
 8000d8a:	7bbb      	ldrb	r3, [r7, #14]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d3ef      	bcc.n	8000d70 <readRegisters+0x40>
	}
	endSPI();
 8000d90:	f7ff ff9a 	bl	8000cc8 <endSPI>
}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <setRegister>:
void setRegister(const REGISTER reg, const uint8_t value, SPI_HandleTypeDef* hspi1)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	603a      	str	r2, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	460b      	mov	r3, r1
 8000daa:	71bb      	strb	r3, [r7, #6]
	startSPI();
 8000dac:	f7ff ff80 	bl	8000cb0 <startSPI>
	uint8_t instruction = INSTRUCTION_WRITE;
 8000db0:	2302      	movs	r3, #2
 8000db2:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi1, &instruction, 1, HAL_MAX_DELAY); //send instruction
 8000db4:	f107 010f 	add.w	r1, r7, #15
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	6838      	ldr	r0, [r7, #0]
 8000dc0:	f001 f91d 	bl	8001ffe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi1, (uint8_t*)&reg, 1, HAL_MAX_DELAY); //send register
 8000dc4:	1df9      	adds	r1, r7, #7
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	2201      	movs	r2, #1
 8000dcc:	6838      	ldr	r0, [r7, #0]
 8000dce:	f001 f916 	bl	8001ffe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi1, (uint8_t*)&value, 1, HAL_MAX_DELAY); //send value
 8000dd2:	1db9      	adds	r1, r7, #6
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	2201      	movs	r2, #1
 8000dda:	6838      	ldr	r0, [r7, #0]
 8000ddc:	f001 f90f 	bl	8001ffe <HAL_SPI_Transmit>
	endSPI();
 8000de0:	f7ff ff72 	bl	8000cc8 <endSPI>
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <setRegisters>:
void setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n, SPI_HandleTypeDef* hspi1)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4603      	mov	r3, r0
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	73bb      	strb	r3, [r7, #14]
	startSPI();
 8000dfe:	f7ff ff57 	bl	8000cb0 <startSPI>
	uint8_t instruction = INSTRUCTION_WRITE;
 8000e02:	2302      	movs	r3, #2
 8000e04:	75bb      	strb	r3, [r7, #22]
	HAL_SPI_Transmit(hspi1, &instruction, 1, HAL_MAX_DELAY); //send instruction
 8000e06:	f107 0116 	add.w	r1, r7, #22
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	2201      	movs	r2, #1
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f001 f8f4 	bl	8001ffe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi1, (uint8_t*)&reg, 1, HAL_MAX_DELAY); //send register
 8000e16:	f107 010f 	add.w	r1, r7, #15
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	2201      	movs	r2, #1
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f001 f8ec 	bl	8001ffe <HAL_SPI_Transmit>
	for (uint8_t i=0; i<n; i++){
 8000e26:	2300      	movs	r3, #0
 8000e28:	75fb      	strb	r3, [r7, #23]
 8000e2a:	e00b      	b.n	8000e44 <setRegisters+0x58>
		HAL_SPI_Transmit(hspi1, (uint8_t*)&values[i], 1, HAL_MAX_DELAY); //receive data
 8000e2c:	7dfb      	ldrb	r3, [r7, #23]
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	18d1      	adds	r1, r2, r3
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	2201      	movs	r2, #1
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f001 f8e0 	bl	8001ffe <HAL_SPI_Transmit>
	for (uint8_t i=0; i<n; i++){
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	3301      	adds	r3, #1
 8000e42:	75fb      	strb	r3, [r7, #23]
 8000e44:	7dfa      	ldrb	r2, [r7, #23]
 8000e46:	7bbb      	ldrb	r3, [r7, #14]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d3ef      	bcc.n	8000e2c <setRegisters+0x40>
	}
	endSPI();
 8000e4c:	f7ff ff3c 	bl	8000cc8 <endSPI>
}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <modifyRegister>:
void modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data, SPI_HandleTypeDef* hspi1)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
 8000e64:	460b      	mov	r3, r1
 8000e66:	71bb      	strb	r3, [r7, #6]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	717b      	strb	r3, [r7, #5]
	startSPI();
 8000e6c:	f7ff ff20 	bl	8000cb0 <startSPI>
	uint8_t instruction = INSTRUCTION_BITMOD;
 8000e70:	2305      	movs	r3, #5
 8000e72:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi1, &instruction, 1, HAL_MAX_DELAY); //send instruction
 8000e74:	f107 010f 	add.w	r1, r7, #15
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	6838      	ldr	r0, [r7, #0]
 8000e80:	f001 f8bd 	bl	8001ffe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi1, (uint8_t*)&reg, 1, HAL_MAX_DELAY); //send register
 8000e84:	1df9      	adds	r1, r7, #7
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	6838      	ldr	r0, [r7, #0]
 8000e8e:	f001 f8b6 	bl	8001ffe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi1, (uint8_t*)&mask, 1, HAL_MAX_DELAY); //send value
 8000e92:	1db9      	adds	r1, r7, #6
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
 8000e98:	2201      	movs	r2, #1
 8000e9a:	6838      	ldr	r0, [r7, #0]
 8000e9c:	f001 f8af 	bl	8001ffe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY); //send value
 8000ea0:	1d79      	adds	r1, r7, #5
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	6838      	ldr	r0, [r7, #0]
 8000eaa:	f001 f8a8 	bl	8001ffe <HAL_SPI_Transmit>
	endSPI();
 8000eae:	f7ff ff0b 	bl	8000cc8 <endSPI>
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	4a0f      	ldr	r2, [pc, #60]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	4a08      	ldr	r2, [pc, #32]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	@ 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a19      	ldr	r2, [pc, #100]	@ (8000f90 <HAL_SPI_MspInit+0x84>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12b      	bne.n	8000f86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <HAL_SPI_MspInit+0x88>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f36:	4a17      	ldr	r2, [pc, #92]	@ (8000f94 <HAL_SPI_MspInit+0x88>)
 8000f38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <HAL_SPI_MspInit+0x88>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <HAL_SPI_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a10      	ldr	r2, [pc, #64]	@ (8000f94 <HAL_SPI_MspInit+0x88>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <HAL_SPI_MspInit+0x88>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f66:	2360      	movs	r3, #96	@ 0x60
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f72:	2303      	movs	r3, #3
 8000f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f76:	2305      	movs	r3, #5
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <HAL_SPI_MspInit+0x8c>)
 8000f82:	f000 f9f1 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	@ 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40013000 	.word	0x40013000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff2:	f000 f8b3 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <SystemInit+0x20>)
 8001002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001006:	4a05      	ldr	r2, [pc, #20]	@ (800101c <SystemInit+0x20>)
 8001008:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800100c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <millis>:

// Initialize timer or system tick interrupt to increment milliseconds variable
// This part is platform-specific and may require hardware-specific code

// Function to get current millisecond count
uint32_t millis() {
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
    return milliseconds;
 8001024:	4b03      	ldr	r3, [pc, #12]	@ (8001034 <millis+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000098 	.word	0x20000098

08001038 <delay>:



// Function to delay for a specified number of milliseconds
void delay(uint32_t ms) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    uint32_t start = millis();
 8001040:	f7ff ffee 	bl	8001020 <millis>
 8001044:	60f8      	str	r0, [r7, #12]
    while ((millis() - start) < ms) {
 8001046:	bf00      	nop
 8001048:	f7ff ffea 	bl	8001020 <millis>
 800104c:	4602      	mov	r2, r0
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <delay+0x10>
        // You may need to insert platform-specific delay mechanism here
    }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800109c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001068:	f7ff ffc8 	bl	8000ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800106c:	480c      	ldr	r0, [pc, #48]	@ (80010a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106e:	490d      	ldr	r1, [pc, #52]	@ (80010a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001070:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001084:	4c0a      	ldr	r4, [pc, #40]	@ (80010b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001092:	f001 fd09 	bl	8002aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001096:	f7ff fa17 	bl	80004c8 <main>
  bx  lr    
 800109a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800109c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010a8:	08002b30 	.word	0x08002b30
  ldr r2, =_sbss
 80010ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010b0:	200000a0 	.word	0x200000a0

080010b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <HAL_Init+0x40>)
 80010c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <HAL_Init+0x40>)
 80010ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	@ (80010f8 <HAL_Init+0x40>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f90d 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	200f      	movs	r0, #15
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fee6 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f917 	bl	800134e <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 f8ed 	bl	8001316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	@ (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	2000009c 	.word	0x2000009c

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000009c 	.word	0x2000009c

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	@ (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	@ (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	@ 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	@ 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff47 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff5c 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff8e 	bl	8001254 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffb0 	bl	80012bc <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	@ 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e159      	b.n	8001638 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 8148 	bne.w	8001632 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d130      	bne.n	800141c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 0201 	and.w	r2, r3, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b03      	cmp	r3, #3
 8001426:	d017      	beq.n	8001458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d123      	bne.n	80014ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80a2 	beq.w	8001632 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b57      	ldr	r3, [pc, #348]	@ (8001650 <HAL_GPIO_Init+0x2e8>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	4a56      	ldr	r2, [pc, #344]	@ (8001650 <HAL_GPIO_Init+0x2e8>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fe:	4b54      	ldr	r3, [pc, #336]	@ (8001650 <HAL_GPIO_Init+0x2e8>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150a:	4a52      	ldr	r2, [pc, #328]	@ (8001654 <HAL_GPIO_Init+0x2ec>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a49      	ldr	r2, [pc, #292]	@ (8001658 <HAL_GPIO_Init+0x2f0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d019      	beq.n	800156a <HAL_GPIO_Init+0x202>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a48      	ldr	r2, [pc, #288]	@ (800165c <HAL_GPIO_Init+0x2f4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x1fe>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a47      	ldr	r2, [pc, #284]	@ (8001660 <HAL_GPIO_Init+0x2f8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x1fa>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a46      	ldr	r2, [pc, #280]	@ (8001664 <HAL_GPIO_Init+0x2fc>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x1f6>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a45      	ldr	r2, [pc, #276]	@ (8001668 <HAL_GPIO_Init+0x300>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x1f2>
 8001556:	2304      	movs	r3, #4
 8001558:	e008      	b.n	800156c <HAL_GPIO_Init+0x204>
 800155a:	2307      	movs	r3, #7
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x204>
 800155e:	2303      	movs	r3, #3
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x204>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x204>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x204>
 800156a:	2300      	movs	r3, #0
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	f002 0203 	and.w	r2, r2, #3
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	4093      	lsls	r3, r2
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800157c:	4935      	ldr	r1, [pc, #212]	@ (8001654 <HAL_GPIO_Init+0x2ec>)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158a:	4b38      	ldr	r3, [pc, #224]	@ (800166c <HAL_GPIO_Init+0x304>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ae:	4a2f      	ldr	r2, [pc, #188]	@ (800166c <HAL_GPIO_Init+0x304>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b4:	4b2d      	ldr	r3, [pc, #180]	@ (800166c <HAL_GPIO_Init+0x304>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d8:	4a24      	ldr	r2, [pc, #144]	@ (800166c <HAL_GPIO_Init+0x304>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015de:	4b23      	ldr	r3, [pc, #140]	@ (800166c <HAL_GPIO_Init+0x304>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001602:	4a1a      	ldr	r2, [pc, #104]	@ (800166c <HAL_GPIO_Init+0x304>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001608:	4b18      	ldr	r3, [pc, #96]	@ (800166c <HAL_GPIO_Init+0x304>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800162c:	4a0f      	ldr	r2, [pc, #60]	@ (800166c <HAL_GPIO_Init+0x304>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	f67f aea2 	bls.w	8001384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40013800 	.word	0x40013800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40021000 	.word	0x40021000
 800166c:	40013c00 	.word	0x40013c00

08001670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800168c:	e003      	b.n	8001696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	041a      	lsls	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	619a      	str	r2, [r3, #24]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e267      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d075      	beq.n	80017ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016c2:	4b88      	ldr	r3, [pc, #544]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d00c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ce:	4b85      	ldr	r3, [pc, #532]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d112      	bne.n	8001700 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016da:	4b82      	ldr	r3, [pc, #520]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016e6:	d10b      	bne.n	8001700 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	4b7e      	ldr	r3, [pc, #504]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d05b      	beq.n	80017ac <HAL_RCC_OscConfig+0x108>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d157      	bne.n	80017ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e242      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001708:	d106      	bne.n	8001718 <HAL_RCC_OscConfig+0x74>
 800170a:	4b76      	ldr	r3, [pc, #472]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a75      	ldr	r2, [pc, #468]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e01d      	b.n	8001754 <HAL_RCC_OscConfig+0xb0>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x98>
 8001722:	4b70      	ldr	r3, [pc, #448]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6f      	ldr	r2, [pc, #444]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b6d      	ldr	r3, [pc, #436]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a6c      	ldr	r2, [pc, #432]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0xb0>
 800173c:	4b69      	ldr	r3, [pc, #420]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a68      	ldr	r2, [pc, #416]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b66      	ldr	r3, [pc, #408]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a65      	ldr	r2, [pc, #404]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d013      	beq.n	8001784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fd12 	bl	8001184 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff fd0e 	bl	8001184 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	@ 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e207      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b5b      	ldr	r3, [pc, #364]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0xc0>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fcfe 	bl	8001184 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fcfa 	bl	8001184 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	@ 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1f3      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	4b51      	ldr	r3, [pc, #324]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0xe8>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d063      	beq.n	8001882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ba:	4b4a      	ldr	r3, [pc, #296]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c6:	4b47      	ldr	r3, [pc, #284]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d11c      	bne.n	800180c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d2:	4b44      	ldr	r3, [pc, #272]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d116      	bne.n	800180c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017de:	4b41      	ldr	r3, [pc, #260]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <HAL_RCC_OscConfig+0x152>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e1c7      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	4b3b      	ldr	r3, [pc, #236]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4937      	ldr	r1, [pc, #220]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180a:	e03a      	b.n	8001882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d020      	beq.n	8001856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001814:	4b34      	ldr	r3, [pc, #208]	@ (80018e8 <HAL_RCC_OscConfig+0x244>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff fcb3 	bl	8001184 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff fcaf 	bl	8001184 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e1a8      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001834:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b28      	ldr	r3, [pc, #160]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4925      	ldr	r1, [pc, #148]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
 8001854:	e015      	b.n	8001882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001856:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <HAL_RCC_OscConfig+0x244>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fc92 	bl	8001184 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fc8e 	bl	8001184 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e187      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d036      	beq.n	80018fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d016      	beq.n	80018c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <HAL_RCC_OscConfig+0x248>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff fc72 	bl	8001184 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a4:	f7ff fc6e 	bl	8001184 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e167      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_RCC_OscConfig+0x240>)
 80018b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x200>
 80018c2:	e01b      	b.n	80018fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c4:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_RCC_OscConfig+0x248>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff fc5b 	bl	8001184 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d0:	e00e      	b.n	80018f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d2:	f7ff fc57 	bl	8001184 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d907      	bls.n	80018f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e150      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
 80018e4:	40023800 	.word	0x40023800
 80018e8:	42470000 	.word	0x42470000
 80018ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f0:	4b88      	ldr	r3, [pc, #544]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80018f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1ea      	bne.n	80018d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 8097 	beq.w	8001a38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190e:	4b81      	ldr	r3, [pc, #516]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10f      	bne.n	800193a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	4a7c      	ldr	r2, [pc, #496]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001928:	6413      	str	r3, [r2, #64]	@ 0x40
 800192a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001936:	2301      	movs	r3, #1
 8001938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193a:	4b77      	ldr	r3, [pc, #476]	@ (8001b18 <HAL_RCC_OscConfig+0x474>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d118      	bne.n	8001978 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001946:	4b74      	ldr	r3, [pc, #464]	@ (8001b18 <HAL_RCC_OscConfig+0x474>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a73      	ldr	r2, [pc, #460]	@ (8001b18 <HAL_RCC_OscConfig+0x474>)
 800194c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001952:	f7ff fc17 	bl	8001184 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195a:	f7ff fc13 	bl	8001184 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e10c      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b18 <HAL_RCC_OscConfig+0x474>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x2ea>
 8001980:	4b64      	ldr	r3, [pc, #400]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001984:	4a63      	ldr	r2, [pc, #396]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6713      	str	r3, [r2, #112]	@ 0x70
 800198c:	e01c      	b.n	80019c8 <HAL_RCC_OscConfig+0x324>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b05      	cmp	r3, #5
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x30c>
 8001996:	4b5f      	ldr	r3, [pc, #380]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199a:	4a5e      	ldr	r2, [pc, #376]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80019a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ae:	e00b      	b.n	80019c8 <HAL_RCC_OscConfig+0x324>
 80019b0:	4b58      	ldr	r3, [pc, #352]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b4:	4a57      	ldr	r2, [pc, #348]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80019bc:	4b55      	ldr	r3, [pc, #340]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c0:	4a54      	ldr	r2, [pc, #336]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80019c2:	f023 0304 	bic.w	r3, r3, #4
 80019c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d015      	beq.n	80019fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff fbd8 	bl	8001184 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d8:	f7ff fbd4 	bl	8001184 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e0cb      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ee:	4b49      	ldr	r3, [pc, #292]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0ee      	beq.n	80019d8 <HAL_RCC_OscConfig+0x334>
 80019fa:	e014      	b.n	8001a26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fc:	f7ff fbc2 	bl	8001184 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a04:	f7ff fbbe 	bl	8001184 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e0b5      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1ee      	bne.n	8001a04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2c:	4b39      	ldr	r3, [pc, #228]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	4a38      	ldr	r2, [pc, #224]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001a32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80a1 	beq.w	8001b84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a42:	4b34      	ldr	r3, [pc, #208]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d05c      	beq.n	8001b08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d141      	bne.n	8001ada <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b31      	ldr	r3, [pc, #196]	@ (8001b1c <HAL_RCC_OscConfig+0x478>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fb92 	bl	8001184 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff fb8e 	bl	8001184 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e087      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a76:	4b27      	ldr	r3, [pc, #156]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	019b      	lsls	r3, r3, #6
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a98:	085b      	lsrs	r3, r3, #1
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa4:	061b      	lsls	r3, r3, #24
 8001aa6:	491b      	ldr	r1, [pc, #108]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aac:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <HAL_RCC_OscConfig+0x478>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fb67 	bl	8001184 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aba:	f7ff fb63 	bl	8001184 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e05c      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x416>
 8001ad8:	e054      	b.n	8001b84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <HAL_RCC_OscConfig+0x478>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fb50 	bl	8001184 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff fb4c 	bl	8001184 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e045      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_RCC_OscConfig+0x470>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x444>
 8001b06:	e03d      	b.n	8001b84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e038      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <HAL_RCC_OscConfig+0x4ec>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d028      	beq.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d121      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d11a      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b50:	4013      	ands	r3, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d111      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b66:	085b      	lsrs	r3, r3, #1
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800

08001b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0cc      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b68      	ldr	r3, [pc, #416]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d90c      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b65      	ldr	r3, [pc, #404]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b63      	ldr	r3, [pc, #396]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0b8      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be8:	4b59      	ldr	r3, [pc, #356]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a58      	ldr	r2, [pc, #352]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c00:	4b53      	ldr	r3, [pc, #332]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a52      	ldr	r2, [pc, #328]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b50      	ldr	r3, [pc, #320]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	494d      	ldr	r1, [pc, #308]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d044      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b47      	ldr	r3, [pc, #284]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d119      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e07f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c52:	4b3f      	ldr	r3, [pc, #252]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	4b3b      	ldr	r3, [pc, #236]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e067      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c72:	4b37      	ldr	r3, [pc, #220]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4934      	ldr	r1, [pc, #208]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c84:	f7ff fa7e 	bl	8001184 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff fa7a 	bl	8001184 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e04f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1eb      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b25      	ldr	r3, [pc, #148]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d20c      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e032      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4916      	ldr	r1, [pc, #88]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d06:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	490e      	ldr	r1, [pc, #56]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d1a:	f000 f821 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	490a      	ldr	r1, [pc, #40]	@ (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	5ccb      	ldrb	r3, [r1, r3]
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	4a09      	ldr	r2, [pc, #36]	@ (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f9de 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00
 8001d50:	40023800 	.word	0x40023800
 8001d54:	08002b10 	.word	0x08002b10
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d64:	b090      	sub	sp, #64	@ 0x40
 8001d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d70:	2300      	movs	r3, #0
 8001d72:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d78:	4b59      	ldr	r3, [pc, #356]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d00d      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x40>
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	f200 80a1 	bhi.w	8001ecc <HAL_RCC_GetSysClockFreq+0x16c>
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x34>
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d003      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d92:	e09b      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d94:	4b53      	ldr	r3, [pc, #332]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d96:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001d98:	e09b      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d9a:	4b53      	ldr	r3, [pc, #332]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d9e:	e098      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001da0:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001da8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001daa:	4b4d      	ldr	r3, [pc, #308]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d028      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	099b      	lsrs	r3, r3, #6
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	623b      	str	r3, [r7, #32]
 8001dc0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4b47      	ldr	r3, [pc, #284]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dcc:	fb03 f201 	mul.w	r2, r3, r1
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	fb00 f303 	mul.w	r3, r0, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a43      	ldr	r2, [pc, #268]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dda:	fba0 1202 	umull	r1, r2, r0, r2
 8001dde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001de0:	460a      	mov	r2, r1
 8001de2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001de4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001de6:	4413      	add	r3, r2
 8001de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dec:	2200      	movs	r2, #0
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	61fa      	str	r2, [r7, #28]
 8001df2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001dfa:	f7fe f9ed 	bl	80001d8 <__aeabi_uldivmod>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4613      	mov	r3, r2
 8001e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e06:	e053      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e08:	4b35      	ldr	r3, [pc, #212]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	2200      	movs	r2, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	617a      	str	r2, [r7, #20]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e1a:	f04f 0b00 	mov.w	fp, #0
 8001e1e:	4652      	mov	r2, sl
 8001e20:	465b      	mov	r3, fp
 8001e22:	f04f 0000 	mov.w	r0, #0
 8001e26:	f04f 0100 	mov.w	r1, #0
 8001e2a:	0159      	lsls	r1, r3, #5
 8001e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e30:	0150      	lsls	r0, r2, #5
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	ebb2 080a 	subs.w	r8, r2, sl
 8001e3a:	eb63 090b 	sbc.w	r9, r3, fp
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e52:	ebb2 0408 	subs.w	r4, r2, r8
 8001e56:	eb63 0509 	sbc.w	r5, r3, r9
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	00eb      	lsls	r3, r5, #3
 8001e64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e68:	00e2      	lsls	r2, r4, #3
 8001e6a:	4614      	mov	r4, r2
 8001e6c:	461d      	mov	r5, r3
 8001e6e:	eb14 030a 	adds.w	r3, r4, sl
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	eb45 030b 	adc.w	r3, r5, fp
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e86:	4629      	mov	r1, r5
 8001e88:	028b      	lsls	r3, r1, #10
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e90:	4621      	mov	r1, r4
 8001e92:	028a      	lsls	r2, r1, #10
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	60fa      	str	r2, [r7, #12]
 8001ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ea4:	f7fe f998 	bl	80001d8 <__aeabi_uldivmod>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4613      	mov	r3, r2
 8001eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	0c1b      	lsrs	r3, r3, #16
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001ec0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001eca:	e002      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ece:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3740      	adds	r7, #64	@ 0x40
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	00f42400 	.word	0x00f42400
 8001ee8:	017d7840 	.word	0x017d7840

08001eec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e07b      	b.n	8001ff6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d108      	bne.n	8001f18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f0e:	d009      	beq.n	8001f24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
 8001f16:	e005      	b.n	8001f24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7fe ffe4 	bl	8000f0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa8:	ea42 0103 	orr.w	r1, r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	0c1b      	lsrs	r3, r3, #16
 8001fc2:	f003 0104 	and.w	r1, r3, #4
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	f003 0210 	and.w	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fe4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b088      	sub	sp, #32
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	4613      	mov	r3, r2
 800200c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_SPI_Transmit+0x22>
 800201c:	2302      	movs	r3, #2
 800201e:	e12d      	b.n	800227c <HAL_SPI_Transmit+0x27e>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002028:	f7ff f8ac 	bl	8001184 <HAL_GetTick>
 800202c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d002      	beq.n	8002044 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800203e:	2302      	movs	r3, #2
 8002040:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002042:	e116      	b.n	8002272 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_SPI_Transmit+0x52>
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002054:	e10d      	b.n	8002272 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2203      	movs	r2, #3
 800205a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	88fa      	ldrh	r2, [r7, #6]
 800206e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	88fa      	ldrh	r2, [r7, #6]
 8002074:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800209c:	d10f      	bne.n	80020be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c8:	2b40      	cmp	r3, #64	@ 0x40
 80020ca:	d007      	beq.n	80020dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020e4:	d14f      	bne.n	8002186 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <HAL_SPI_Transmit+0xf6>
 80020ee:	8afb      	ldrh	r3, [r7, #22]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d142      	bne.n	800217a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f8:	881a      	ldrh	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002104:	1c9a      	adds	r2, r3, #2
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002118:	e02f      	b.n	800217a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b02      	cmp	r3, #2
 8002126:	d112      	bne.n	800214e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212c:	881a      	ldrh	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	1c9a      	adds	r2, r3, #2
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800214c:	e015      	b.n	800217a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800214e:	f7ff f819 	bl	8001184 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d803      	bhi.n	8002166 <HAL_SPI_Transmit+0x168>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d102      	bne.n	800216c <HAL_SPI_Transmit+0x16e>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d106      	bne.n	800217a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002178:	e07b      	b.n	8002272 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800217e:	b29b      	uxth	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ca      	bne.n	800211a <HAL_SPI_Transmit+0x11c>
 8002184:	e050      	b.n	8002228 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <HAL_SPI_Transmit+0x196>
 800218e:	8afb      	ldrh	r3, [r7, #22]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d144      	bne.n	800221e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	330c      	adds	r3, #12
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021ba:	e030      	b.n	800221e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d113      	bne.n	80021f2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	330c      	adds	r3, #12
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80021f0:	e015      	b.n	800221e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021f2:	f7fe ffc7 	bl	8001184 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d803      	bhi.n	800220a <HAL_SPI_Transmit+0x20c>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d102      	bne.n	8002210 <HAL_SPI_Transmit+0x212>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800221c:	e029      	b.n	8002272 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1c9      	bne.n	80021bc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	6839      	ldr	r1, [r7, #0]
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 fbdf 	bl	80029f0 <SPI_EndRxTxTransaction>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10a      	bne.n	800225c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	77fb      	strb	r3, [r7, #31]
 8002268:	e003      	b.n	8002272 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800227a:	7ffb      	ldrb	r3, [r7, #31]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d002      	beq.n	80022aa <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80022a4:	2302      	movs	r3, #2
 80022a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022a8:	e0fb      	b.n	80024a2 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022b2:	d112      	bne.n	80022da <HAL_SPI_Receive+0x56>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10e      	bne.n	80022da <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2204      	movs	r2, #4
 80022c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022c4:	88fa      	ldrh	r2, [r7, #6]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	4613      	mov	r3, r2
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f8ef 	bl	80024b4 <HAL_SPI_TransmitReceive>
 80022d6:	4603      	mov	r3, r0
 80022d8:	e0e8      	b.n	80024ac <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_SPI_Receive+0x64>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e0e1      	b.n	80024ac <HAL_SPI_Receive+0x228>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022f0:	f7fe ff48 	bl	8001184 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_SPI_Receive+0x7e>
 80022fc:	88fb      	ldrh	r3, [r7, #6]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002306:	e0cc      	b.n	80024a2 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2204      	movs	r2, #4
 800230c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800234e:	d10f      	bne.n	8002370 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800235e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800236e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800237a:	2b40      	cmp	r3, #64	@ 0x40
 800237c:	d007      	beq.n	800238e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d16a      	bne.n	800246c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002396:	e032      	b.n	80023fe <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d115      	bne.n	80023d2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f103 020c 	add.w	r2, r3, #12
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023d0:	e015      	b.n	80023fe <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023d2:	f7fe fed7 	bl	8001184 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d803      	bhi.n	80023ea <HAL_SPI_Receive+0x166>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d102      	bne.n	80023f0 <HAL_SPI_Receive+0x16c>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d106      	bne.n	80023fe <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80023fc:	e051      	b.n	80024a2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1c7      	bne.n	8002398 <HAL_SPI_Receive+0x114>
 8002408:	e035      	b.n	8002476 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b01      	cmp	r3, #1
 8002416:	d113      	bne.n	8002440 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002422:	b292      	uxth	r2, r2
 8002424:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800242a:	1c9a      	adds	r2, r3, #2
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800243e:	e015      	b.n	800246c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002440:	f7fe fea0 	bl	8001184 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d803      	bhi.n	8002458 <HAL_SPI_Receive+0x1d4>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d102      	bne.n	800245e <HAL_SPI_Receive+0x1da>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800246a:	e01a      	b.n	80024a2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1c9      	bne.n	800240a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	6839      	ldr	r1, [r7, #0]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fa52 	bl	8002924 <SPI_EndRxTransaction>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	75fb      	strb	r3, [r7, #23]
 8002498:	e003      	b.n	80024a2 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	@ 0x30
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024c2:	2301      	movs	r3, #1
 80024c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_SPI_TransmitReceive+0x26>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e198      	b.n	800280c <HAL_SPI_TransmitReceive+0x358>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024e2:	f7fe fe4f 	bl	8001184 <HAL_GetTick>
 80024e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002500:	2b01      	cmp	r3, #1
 8002502:	d00f      	beq.n	8002524 <HAL_SPI_TransmitReceive+0x70>
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800250a:	d107      	bne.n	800251c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <HAL_SPI_TransmitReceive+0x68>
 8002514:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002518:	2b04      	cmp	r3, #4
 800251a:	d003      	beq.n	8002524 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800251c:	2302      	movs	r3, #2
 800251e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002522:	e16d      	b.n	8002800 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_SPI_TransmitReceive+0x82>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_SPI_TransmitReceive+0x82>
 8002530:	887b      	ldrh	r3, [r7, #2]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800253c:	e160      	b.n	8002800 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b04      	cmp	r3, #4
 8002548:	d003      	beq.n	8002552 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2205      	movs	r2, #5
 800254e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	887a      	ldrh	r2, [r7, #2]
 8002562:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	887a      	ldrh	r2, [r7, #2]
 800257a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002592:	2b40      	cmp	r3, #64	@ 0x40
 8002594:	d007      	beq.n	80025a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025ae:	d17c      	bne.n	80026aa <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <HAL_SPI_TransmitReceive+0x10a>
 80025b8:	8b7b      	ldrh	r3, [r7, #26]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d16a      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	881a      	ldrh	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	1c9a      	adds	r2, r3, #2
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e2:	e057      	b.n	8002694 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d11b      	bne.n	800262a <HAL_SPI_TransmitReceive+0x176>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d016      	beq.n	800262a <HAL_SPI_TransmitReceive+0x176>
 80025fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d113      	bne.n	800262a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	881a      	ldrh	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	1c9a      	adds	r2, r3, #2
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d119      	bne.n	800266c <HAL_SPI_TransmitReceive+0x1b8>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d014      	beq.n	800266c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264c:	b292      	uxth	r2, r2
 800264e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002654:	1c9a      	adds	r2, r3, #2
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002668:	2301      	movs	r3, #1
 800266a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800266c:	f7fe fd8a 	bl	8001184 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002678:	429a      	cmp	r2, r3
 800267a:	d80b      	bhi.n	8002694 <HAL_SPI_TransmitReceive+0x1e0>
 800267c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800267e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002682:	d007      	beq.n	8002694 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002692:	e0b5      	b.n	8002800 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1a2      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x130>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d19d      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x130>
 80026a8:	e080      	b.n	80027ac <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_SPI_TransmitReceive+0x204>
 80026b2:	8b7b      	ldrh	r3, [r7, #26]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d16f      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	330c      	adds	r3, #12
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026de:	e05b      	b.n	8002798 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d11c      	bne.n	8002728 <HAL_SPI_TransmitReceive+0x274>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d017      	beq.n	8002728 <HAL_SPI_TransmitReceive+0x274>
 80026f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d114      	bne.n	8002728 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	330c      	adds	r3, #12
 8002708:	7812      	ldrb	r2, [r2, #0]
 800270a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b01      	cmp	r3, #1
 8002734:	d119      	bne.n	800276a <HAL_SPI_TransmitReceive+0x2b6>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d014      	beq.n	800276a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002766:	2301      	movs	r3, #1
 8002768:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800276a:	f7fe fd0b 	bl	8001184 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002776:	429a      	cmp	r2, r3
 8002778:	d803      	bhi.n	8002782 <HAL_SPI_TransmitReceive+0x2ce>
 800277a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d102      	bne.n	8002788 <HAL_SPI_TransmitReceive+0x2d4>
 8002782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002796:	e033      	b.n	8002800 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d19e      	bne.n	80026e0 <HAL_SPI_TransmitReceive+0x22c>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d199      	bne.n	80026e0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f91d 	bl	80029f0 <SPI_EndRxTxTransaction>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d006      	beq.n	80027ca <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80027c8:	e01a      	b.n	8002800 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027f6:	e003      	b.n	8002800 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002808:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800280c:	4618      	mov	r0, r3
 800280e:	3730      	adds	r7, #48	@ 0x30
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002824:	f7fe fcae 	bl	8001184 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	4413      	add	r3, r2
 8002832:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002834:	f7fe fca6 	bl	8001184 <HAL_GetTick>
 8002838:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800283a:	4b39      	ldr	r3, [pc, #228]	@ (8002920 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	015b      	lsls	r3, r3, #5
 8002840:	0d1b      	lsrs	r3, r3, #20
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	fb02 f303 	mul.w	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800284a:	e054      	b.n	80028f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002852:	d050      	beq.n	80028f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002854:	f7fe fc96 	bl	8001184 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	429a      	cmp	r2, r3
 8002862:	d902      	bls.n	800286a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d13d      	bne.n	80028e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002882:	d111      	bne.n	80028a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800288c:	d004      	beq.n	8002898 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002896:	d107      	bne.n	80028a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028b0:	d10f      	bne.n	80028d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e017      	b.n	8002916 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4013      	ands	r3, r2
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	429a      	cmp	r2, r3
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	429a      	cmp	r2, r3
 8002912:	d19b      	bne.n	800284c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3720      	adds	r7, #32
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000000 	.word	0x20000000

08002924 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002938:	d111      	bne.n	800295e <SPI_EndRxTransaction+0x3a>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002942:	d004      	beq.n	800294e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800294c:	d107      	bne.n	800295e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800295c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002966:	d12a      	bne.n	80029be <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002970:	d012      	beq.n	8002998 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2200      	movs	r2, #0
 800297a:	2180      	movs	r1, #128	@ 0x80
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff ff49 	bl	8002814 <SPI_WaitFlagStateUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d02d      	beq.n	80029e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e026      	b.n	80029e6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2200      	movs	r2, #0
 80029a0:	2101      	movs	r1, #1
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f7ff ff36 	bl	8002814 <SPI_WaitFlagStateUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d01a      	beq.n	80029e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b2:	f043 0220 	orr.w	r2, r3, #32
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e013      	b.n	80029e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2200      	movs	r2, #0
 80029c6:	2101      	movs	r1, #1
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff ff23 	bl	8002814 <SPI_WaitFlagStateUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d8:	f043 0220 	orr.w	r2, r3, #32
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e000      	b.n	80029e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2201      	movs	r2, #1
 8002a04:	2102      	movs	r1, #2
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f7ff ff04 	bl	8002814 <SPI_WaitFlagStateUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a16:	f043 0220 	orr.w	r2, r3, #32
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e032      	b.n	8002a88 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a22:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <SPI_EndRxTxTransaction+0xa0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1b      	ldr	r2, [pc, #108]	@ (8002a94 <SPI_EndRxTxTransaction+0xa4>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	0d5b      	lsrs	r3, r3, #21
 8002a2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a40:	d112      	bne.n	8002a68 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2180      	movs	r1, #128	@ 0x80
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f7ff fee1 	bl	8002814 <SPI_WaitFlagStateUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d016      	beq.n	8002a86 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a5c:	f043 0220 	orr.w	r2, r3, #32
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e00f      	b.n	8002a88 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7e:	2b80      	cmp	r3, #128	@ 0x80
 8002a80:	d0f2      	beq.n	8002a68 <SPI_EndRxTxTransaction+0x78>
 8002a82:	e000      	b.n	8002a86 <SPI_EndRxTxTransaction+0x96>
        break;
 8002a84:	bf00      	nop
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000000 	.word	0x20000000
 8002a94:	165e9f81 	.word	0x165e9f81

08002a98 <memset>:
 8002a98:	4402      	add	r2, r0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d100      	bne.n	8002aa2 <memset+0xa>
 8002aa0:	4770      	bx	lr
 8002aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8002aa6:	e7f9      	b.n	8002a9c <memset+0x4>

08002aa8 <__libc_init_array>:
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	4d0d      	ldr	r5, [pc, #52]	@ (8002ae0 <__libc_init_array+0x38>)
 8002aac:	4c0d      	ldr	r4, [pc, #52]	@ (8002ae4 <__libc_init_array+0x3c>)
 8002aae:	1b64      	subs	r4, r4, r5
 8002ab0:	10a4      	asrs	r4, r4, #2
 8002ab2:	2600      	movs	r6, #0
 8002ab4:	42a6      	cmp	r6, r4
 8002ab6:	d109      	bne.n	8002acc <__libc_init_array+0x24>
 8002ab8:	4d0b      	ldr	r5, [pc, #44]	@ (8002ae8 <__libc_init_array+0x40>)
 8002aba:	4c0c      	ldr	r4, [pc, #48]	@ (8002aec <__libc_init_array+0x44>)
 8002abc:	f000 f818 	bl	8002af0 <_init>
 8002ac0:	1b64      	subs	r4, r4, r5
 8002ac2:	10a4      	asrs	r4, r4, #2
 8002ac4:	2600      	movs	r6, #0
 8002ac6:	42a6      	cmp	r6, r4
 8002ac8:	d105      	bne.n	8002ad6 <__libc_init_array+0x2e>
 8002aca:	bd70      	pop	{r4, r5, r6, pc}
 8002acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad0:	4798      	blx	r3
 8002ad2:	3601      	adds	r6, #1
 8002ad4:	e7ee      	b.n	8002ab4 <__libc_init_array+0xc>
 8002ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ada:	4798      	blx	r3
 8002adc:	3601      	adds	r6, #1
 8002ade:	e7f2      	b.n	8002ac6 <__libc_init_array+0x1e>
 8002ae0:	08002b28 	.word	0x08002b28
 8002ae4:	08002b28 	.word	0x08002b28
 8002ae8:	08002b28 	.word	0x08002b28
 8002aec:	08002b2c 	.word	0x08002b2c

08002af0 <_init>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	bf00      	nop
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr

08002afc <_fini>:
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afe:	bf00      	nop
 8002b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b02:	bc08      	pop	{r3}
 8002b04:	469e      	mov	lr, r3
 8002b06:	4770      	bx	lr
